import streamlit as st
from components.sidebar import sidebar
from openai.error import OpenAIError
from utils import (
    embed_docs,
    get_answer,
    get_sources,
    parse_docx,
    parse_pdf,
    parse_txt,
    search_docs,
    text_to_docs,
    wrap_text_in_html,
)


def clear_submit():
    st.session_state["submit"] = False


st.set_page_config(page_title="UAPDF2GPT", page_icon="üìñ", layout="wide")
st.header("–ü–î–§–ê–ù–ê–õ–Ü–¢–ò–ö–ê")

sidebar()

uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–∏ pdf, docx, or txt file",
    type=["pdf", "docx", "txt"],
    help="–í—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—é—Ç—å—Å—è!(–ø–æ–∫–∏ —â–æ)",
    on_change=clear_submit,
)

index = None
doc = None
if uploaded_file is not None:
    if uploaded_file.name.endswith(".pdf"):
        doc = parse_pdf(uploaded_file)
    elif uploaded_file.name.endswith(".docx"):
        doc = parse_docx(uploaded_file)
    elif uploaded_file.name.endswith(".txt"):
        doc = parse_txt(uploaded_file)
    else:
        raise ValueError("–í—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—é—Ç—å—Å—è!(–ø–æ–∫–∏ —â–æ)!")
    text = text_to_docs(doc)
    try:
        with st.spinner("–Ü–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞... –¢—Ä–æ—à–∫–∏ –ø–æ—á–µ–∫–∞–π—Ç–µ‚è≥"):
            index = embed_docs(text)
        st.session_state["api_key_configured"] = True
    except OpenAIError as e:
        st.error(e._message)

query = st.text_area("–ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ", on_change=clear_submit)
with st.expander("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –û–ø—Ü—ñ—ó"):
    show_all_chunks = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏, –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—à—É–∫—É")
    show_full_doc = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ –≤–º—ñ—Å—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç—É")

if show_full_doc and doc:
    with st.expander("–î–æ–∫—É–º–µ–Ω—Ç"):
        # Hack to get around st.markdown rendering LaTeX
        st.markdown(f"<p>{wrap_text_in_html(doc)}</p>", unsafe_allow_html=True)

button = st.button("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏")
if button or st.session_state.get("submit"):
    if not st.session_state.get("api_key_configured"):
        st.error("–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à OpenAI API key!")
    elif not index:
        st.error("–ë—É–¥—å –ª–∞—Å–∫–∞ –∑–∞–≥—Ä—É–∑—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç!")
    elif not query:
        st.error("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è!")
    else:
        st.session_state["submit"] = True
        # Output Columns
        answer_col, sources_col = st.columns(2)
        sources = search_docs(index, query)

        try:
            answer = get_answer(sources, query)
            if not show_all_chunks:
                # Get the sources for the answer
                sources = get_sources(answer, sources)

            with answer_col:
                st.markdown("#### Answer")
                st.markdown(answer["output_text"].split("SOURCES: ")[0])

            with sources_col:
                st.markdown("#### Sources")
                for source in sources:
                    st.markdown(source.page_content)
                    st.markdown(source.metadata["source"])
                    st.markdown("---")

        except OpenAIError as e:
            st.error(e._message)
